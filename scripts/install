#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	true
}

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
is_public=$YNH_APP_ARG_IS_PUBLIC
app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_script_progression --message="Validating installation parameters..."

final_path=/var/www/$app
config_path=/home/yunohost.app/$app

test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Normalize the url path syntax
path_url=$(ynh_normalize_url_path $path_url)

# Check web path availability
ynh_webpath_available "$domain" "$path_url"

# Register (book) web path
ynh_webpath_register "$app" "$domain" "$path_url"

#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Configuring firewall..."

# Find a free port
port=$(ynh_find_port 9000)

ynh_app_setting_set --app="$app" --key="port" --value="$port"

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..."

ynh_app_setting_set --app="$app" --key="domain"      --value="$domain"
ynh_app_setting_set --app="$app" --key="path"        --value="$path_url"
ynh_app_setting_set --app="$app" --key="is_public"   --value="$is_public"
ynh_app_setting_set --app="$app" --key="final_path"  --value="$final_path"
ynh_app_setting_set --app="$app" --key="config_path" --value="$config_path"

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..."

# Install Nodejs
ynh_exec_warn_less ynh_install_nodejs --nodejs_version="$nodejs_version"

# Install Yarn
ynh_install_extra_app_dependencies --repo="deb https://dl.yarnpkg.com/debian/ stable main" --package="yarn" --key="https://dl.yarnpkg.com/debian/pubkey.gpg"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..."

mkdir -p "$final_path"

mkdir -p "$config_path"

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$final_path"

#=================================================
# COPY A CONFIG FILE
#=================================================

# Main config File
ynh_replace_string --match_string="__PORT__" --replace_string="$port" --target_file="../conf/config.js"

cp -a ../conf/config.js "$config_path"

ynh_store_file_checksum "$config_path/config.js"

#=================================================
# INSTALL THE LOUNGE
#=================================================
ynh_script_progression --message="Installing The Lounge..."

pushd "$final_path"

yarn install && ynh_exec_warn_less NODE_ENV=production yarn build

popd

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..."

# Create a system user
ynh_system_user_create "$app"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring nginx web server..."

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Configuring a systemd service..."

ynh_replace_string --match_string="__APP__"       --replace_string="$app"         --target_file="../conf/systemd.service"
ynh_replace_string --match_string="__FINALPATH__" --replace_string="$final_path"  --target_file="../conf/systemd.service"
ynh_replace_string --match_string="__ENV_PATH__"  --replace_string="$PATH"        --target_file="../conf/systemd.service"
ynh_replace_string --match_string="__NODE__"      --replace_string="$nodejs_path" --target_file="../conf/systemd.service"

ynh_add_systemd_config

yunohost service add "$app" --description "Self-hosted web IRC client" --log "/var/log/$app/$app.log"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions to app files
chown -R "$app": "$final_path"
chown -R "$app": "$config_path"

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Configuring log rotation..."

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..."

# Start a systemd service
ynh_systemd_action --service_name="$app" --action="start" --log_path="systemd"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Configuring SSOwat..."

# Make app public if necessary
#if [ $is_public -eq 1 ]
#then
#	# unprotected_uris allows SSO credentials to be passed anyway.
#	ynh_app_setting_set --app="$app" --key=unprotected_uris --value="/"
#fi

# Make app public if necessary or protect it
[ $is_public -eq 0 ] || ynh_permission_update --permission "main" --add "visitors"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..."

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --last
